name: CI/CD - Docker para AWS ECR

on:
  push:
    branches:
      - main
env:             
  ECR_REPOSITORY: ${ { secrets.ECR_REPOSITORY }}         
  ECS_SERVICE: ${ { secrets.ECS_SERVICE }}              
  ECS_CLUSTER: ${ { secrets.ECS_CLUSTER }}
  AWS_SECRET_ACCESS_KEY: ${ { secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_ACCESS_KEY_ID: ${ { secrets.AWS_ACCESS_KEY_ID }}
permissions:
  id-token: write   
  contents: read    

jobs:
  build:
    runs-on: ubuntu-latest  
    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Setup do PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          coverage: none

      - name: Instalar dependências PHP
        run: composer install --no-interaction --prefer-dist --optimize-autoloader
        
      - name: Dar permissão ao PHPUnit
        run: chmod +x vendor/bin/phpunit

      - name: Rodar testes com PHPUnit
        run: composer test
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-region: us-east-2
          role-to-assume: arn:aws:iam::737990545696:role/ci-cd-nuvem-fn

      - name: Login no Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Construir imagem Docker
        id: build-image
        env:
          ECR_REGISTRY: ${{steps.login-ecr.outputs.registry}}
          ECR_REPOSITORY: ci-cd-nuvem
          IMAGE_TAG: ${{ github.sha }}
        run: 
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: taskdefinition.json
          container-name: app-php
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{steps.task-def.outputs.taskdefinition}}
          service: $ECS_SERVICE
          cluster: $ECS_CLUSTER
          wait-for-service-stability: true